#!/usr/bin/env python3
# coding: utf-8

import sys
import csv

def timestampToInt(timestamp):
    ts1 = timestamp.split(",")
    ms = int(ts1[1])
    ts2 = ts1[0].split(":")
    h = int(ts2[0])
    m = int(ts2[1])
    s = int(ts2[2])
    return ms + 1000 * (s + 60 * (m + 60 * h))


class Subtitle:
    def __init__(self, text, timestamp):
        self.text = text
        self.timestamp = timestamp
        self.intTS = timestampToInt(timestamp)
        
        
    def __repr__(self):
        return "%s: %s" % (self.timestamp, self.text)
        
    def add_tag(self, tag):
        if self.text == "":
            self.text = tag
        else:
            self.text += " " + tag
        

class Subtitles:
    
    def __init__(self):
        self.messages = []

    def __str__(self):
        result = ""
        i = 1
        for m1, m2 in zip(self.messages, self.messages[1:]):
            if m1.text != "":
                result += str(i) + "\r\n"
                result += m1.timestamp + " --> " + m2.timestamp + "\r\n"
                result += m1.text + "\r\n\r\n"
                i += 1
        return result
    
    def add_row(self, row):
        threshold_warning_sec = 5
        if row[2] == "...":
            row[2] = "06:00:00,000"
        if len(self.messages) == 0:
            self.messages.append(Subtitle(row[0], row[1]))
            self.messages.append(Subtitle("", row[2]))
        else:
            begin = timestampToInt(row[1])
            end = timestampToInt(row[2])
            if end - begin > 1000 * threshold_warning_sec:
                print("Duration >", threshold_warning_sec, "seconds:", row)
            
            firstInside = next((i for i, m in enumerate(self.messages) if m.intTS >= begin), -1)
            firstOutside = next((i for i, m in enumerate(self.messages) if m.intTS >= end), -1)
            
            # the new interval is before any timestamp
            if firstInside == -1:
                self.messages.append(Subtitle(row[0], row[1]))
                self.messages.append(Subtitle("", row[2]))
            else:
                if firstInside == 0:
                    lastText = ""
                else:
                    lastText = self.messages[firstInside - 1].text
                
                untilTheEnd = firstOutside == -1
                
                # add a supplementary subtitle at the begining if required
                if self.messages[firstInside].intTS > begin:
                    sub = Subtitle(lastText, row[1])
                    sub.add_tag(row[0])
                    self.messages.insert(firstInside, sub)
                    firstOutside += 1
                elif self.messages[firstInside].intTS == begin:
                    # the current is also the first inside
                    firstInside -= 1
                
                
                # update exiting messages
                for i in range(firstInside + 1, len(self.messages) if untilTheEnd else firstOutside):
                    lastText = self.messages[i].text
                    self.messages[i].add_tag(row[0])

                if untilTheEnd:
                    self.messages.append(Subtitle(lastText, row[2]))
                else:
                    # add a supplementary subtitle at the end if required
                    if self.messages[firstOutside].intTS > end:
                        sub = Subtitle(lastText, row[2])
                        self.messages.insert(firstOutside, sub)


def usage():
    print("tags2srt.py [INPUT [OUTPUT]|-h|--help]")
    print("A tool to convert tag files (csv format) generated by tofu to subtitles (srt).")
    print("")
    print("Parameters:")
    print("  -h, --help      Display this message and exit")
    print("")
    print("  INPUT           A csv file generated by tofu. Each line is defined by a tag,")
    print("                  and two timestamps (begin/end).")
    print("  OUTPUT          A srt file to be loaded as a subtitle for the initial video.")
    print("                  If no output is defined, result is printed in the standard")
    print("                  output.")


def build_subtitles(inputFile):
    
    try:
        csv_file = open(inputFile, mode='r')
    except OSError:
        print("Could not open/read file:", inputFile)
        return None

    subtitles = Subtitles()
    with csv_file:
        tags = csv.reader(csv_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        
        for row in tags:
            if len(row) == 3:
                subtitles.add_row(row)
    
    return subtitles
        

if not len(sys.argv) in [2, 3]:
    print("Error: wrong number of parameters")
    print("")
    usage()
    exit(1)

if len(sys.argv) == 2 and sys.argv[1] in ["-h", "--help"]:
    usage()
    exit(0)
    
    
    

subtitles = build_subtitles(sys.argv[1])

if subtitles == None:
    exit(1)

if len(sys.argv) == 2:
    print(subtitles)
else:
     with open(sys.argv[2], mode='w') as srtFile:
            srtFile.write(str(subtitles))
                
